{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSVY for Python \u00a4 CSV is a popular format for storing tabular data used in many disciplines. Metadata concerning the contents of the file is often included in the header, but it rarely follows a format that is machine readable - sometimes is not even human readable! In some cases, such information is provided in a separate file, which is not ideal as it is easy for data and metadata to get separated. CSVY is a small Python package to handle CSV files in which the metadata in the header is formatted in YAML. It supports reading/writing tabular data contained in numpy arrays, pandas DataFrames and nested lists, as well as metadata using a standard python dictionary. Ultimately, it aims to incorporate information about the CSV dialect used and a Table Schema specifying the contents of each column to aid the reading and interpretation of the data. Instalation \u00a4 'pycsvy' is available in PyPI therefore its installation is as easy as: pip install pycsvy In order to support reading into numpy arrays or into pandas DataFrames, you will need to install those two packages, too. Usage \u00a4 In the simplest case, to save some data contained in data and some metadata contained in a metadata dictionary into a CSVY file important_data.csv (the extension is not relevant), just do the following: import csvy csvy.write(\"important_data.csv\", data, metadata) The resulting file will have the YAML-formatted header in between --- markers with, optionally, a comment character starting each header line. It could look something like the following: --- name: my-dataset title: Example file of csvy description: Show a csvy sample file. encoding: utf-8 schema: fields: - name: Date type: object - name: WTI type: number --- Date,WTI 1986-01-02,25.56 1986-01-03,26.00 1986-01-06,26.53 1986-01-07,25.85 1986-01-08,25.87 For reading the information back: import csvy # To read into a numpy array data, metadata = csvy.read_to_array(\"important_data.csv\") # To read into a pandas DataFrame data, metadata = csvy.read_to_dataframe(\"important_data.csv\") The appropriate writer/reader will be selected based on the type of data : numpy array: np.savetxt and np.loadtxt pandas DataFrame: pd.DataFrame.to_csv and pd.read_csv nested lists:' csv.writer and csv.reader Options can be passed to the tabular data writer/reader by setting the csv_options dictionary. Likewise you can set the yaml_options dictionary with whatever options you want to pass to yaml.safe_load and yaml.safe_dump functions, reading/writing the YAML-formatted header, respectively. Finally, you can control the character(s) used to indicate comments by setting the comment keyword when writing a file. By default, there is no character (\"\"). During reading, the comment character is found atomatically. Contributors \u2728 \u00a4 Thanks goes to these wonderful people ( emoji key ): Diego Alonso \u00c1lvarez \ud83d\ude87 \ud83e\udd14 \ud83d\udea7 \u26a0\ufe0f \ud83d\udc1b \ud83d\udcbb Alex Dewar \ud83e\udd14 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Home"},{"location":"#csvy-for-python","text":"CSV is a popular format for storing tabular data used in many disciplines. Metadata concerning the contents of the file is often included in the header, but it rarely follows a format that is machine readable - sometimes is not even human readable! In some cases, such information is provided in a separate file, which is not ideal as it is easy for data and metadata to get separated. CSVY is a small Python package to handle CSV files in which the metadata in the header is formatted in YAML. It supports reading/writing tabular data contained in numpy arrays, pandas DataFrames and nested lists, as well as metadata using a standard python dictionary. Ultimately, it aims to incorporate information about the CSV dialect used and a Table Schema specifying the contents of each column to aid the reading and interpretation of the data.","title":"CSVY for Python"},{"location":"#instalation","text":"'pycsvy' is available in PyPI therefore its installation is as easy as: pip install pycsvy In order to support reading into numpy arrays or into pandas DataFrames, you will need to install those two packages, too.","title":"Instalation"},{"location":"#usage","text":"In the simplest case, to save some data contained in data and some metadata contained in a metadata dictionary into a CSVY file important_data.csv (the extension is not relevant), just do the following: import csvy csvy.write(\"important_data.csv\", data, metadata) The resulting file will have the YAML-formatted header in between --- markers with, optionally, a comment character starting each header line. It could look something like the following: --- name: my-dataset title: Example file of csvy description: Show a csvy sample file. encoding: utf-8 schema: fields: - name: Date type: object - name: WTI type: number --- Date,WTI 1986-01-02,25.56 1986-01-03,26.00 1986-01-06,26.53 1986-01-07,25.85 1986-01-08,25.87 For reading the information back: import csvy # To read into a numpy array data, metadata = csvy.read_to_array(\"important_data.csv\") # To read into a pandas DataFrame data, metadata = csvy.read_to_dataframe(\"important_data.csv\") The appropriate writer/reader will be selected based on the type of data : numpy array: np.savetxt and np.loadtxt pandas DataFrame: pd.DataFrame.to_csv and pd.read_csv nested lists:' csv.writer and csv.reader Options can be passed to the tabular data writer/reader by setting the csv_options dictionary. Likewise you can set the yaml_options dictionary with whatever options you want to pass to yaml.safe_load and yaml.safe_dump functions, reading/writing the YAML-formatted header, respectively. Finally, you can control the character(s) used to indicate comments by setting the comment keyword when writing a file. By default, there is no character (\"\"). During reading, the comment character is found atomatically.","title":"Usage"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Diego Alonso \u00c1lvarez \ud83d\ude87 \ud83e\udd14 \ud83d\udea7 \u26a0\ufe0f \ud83d\udc1b \ud83d\udcbb Alex Dewar \ud83e\udd14 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributors \u2728"},{"location":"reference/SUMMARY/","text":"csvy readers writers","title":"SUMMARY"},{"location":"reference/csvy/","text":"csvy \u00a4 Python reader/writer for CSV files with YAML header information. Functions \u00a4","title":"csvy"},{"location":"reference/csvy/#csvy","text":"Python reader/writer for CSV files with YAML header information.","title":"csvy"},{"location":"reference/csvy/#csvy-functions","text":"","title":"Functions"},{"location":"reference/csvy/readers/","text":"csvy.readers \u00a4 Functions \u00a4 get_comment ( line , marker = '---' ) \u00a4 Retrieves the comment character used in the header. Given that we know the header limiting markers are '---' it is possible to automatically find out the comment character by simply retrieving what is before the first occurrence of the marker. So, if we find '# ---', then we know that the comment characters are '# '. This will save the user to having to check the file before reading it. Parameters: Name Type Description Default line str Line of text, typically the first one of the file. required marker str The marker characters that indicate the yaml header. '---' Returns: Type Description str The comment character found. Source code in csvy/readers.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def get_comment ( line : str , marker : str = \"---\" ) -> str : \"\"\"Retrieves the comment character used in the header. Given that we know the header limiting markers are '---' it is possible to automatically find out the comment character by simply retrieving what is before the first occurrence of the marker. So, if we find '# ---', then we know that the comment characters are '# '. This will save the user to having to check the file before reading it. Args: line: Line of text, typically the first one of the file. marker: The marker characters that indicate the yaml header. Returns: The comment character found. \"\"\" if marker not in line : raise ValueError ( f \"Yaml header marker ' { marker } ' not found in line ' { line } '.\" ) else : return \"\" if line . startswith ( marker ) else line . split ( marker )[ 0 ] read_header ( filename , marker = '---' , ** kwargs ) \u00a4 Read the yaml-formatted header from a file. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read the header from. required marker str The marker characters that indicate the yaml header. '---' **kwargs Any Arguments to pass to 'yaml.safe_load'. {} Returns: Type Description Tuple [ Dict [ str , Any ], int , str ] Tuple containing: a dictionary with the header information, the number of header lines, and the comment character. Source code in csvy/readers.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def read_header ( filename : Union [ Path , str ], marker : str = \"---\" , ** kwargs : Any ) -> Tuple [ Dict [ str , Any ], int , str ]: \"\"\"Read the yaml-formatted header from a file. Args: filename: Name of the file to read the header from. marker: The marker characters that indicate the yaml header. **kwargs: Arguments to pass to 'yaml.safe_load'. Returns: Tuple containing: a dictionary with the header information, the number of header lines, and the comment character. \"\"\" header = [] markers = 0 nlines = 0 comment = \"\" with Path ( filename ) . open ( \"r\" ) as f : for line in f : if nlines == 0 : comment = get_comment ( line , marker = marker ) nlines += 1 if line . startswith ( f \" { comment }{ marker } \\n \" ): markers += 1 if markers == 2 : break line = line . lstrip ( comment ) header . append ( line ) return yaml . safe_load ( \"\" . join ( header ), ** kwargs ), nlines , comment read_to_array ( filename , marker = '---' , csv_options = None , yaml_options = None ) \u00a4 Reads a CSVY file into dict with the header and array with the data. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read. required marker str The marker characters that indicate the yaml header. '---' csv_options Optional [ Dict [ str , Any ]] Options to pass to np.loadtxt. None yaml_options Optional [ Dict [ str , Any ]] Options to pass to yaml.safe_load. None Raises: Type Description ModuleNotFoundError If numpy is not found. Returns: Type Description Tuple [ NDArray , Dict [ str , Any ]] Tuple containing: The numpy array and the header as a dictionary. Source code in csvy/readers.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 def read_to_array ( filename : Union [ Path , str ], marker : str = \"---\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> Tuple [ NDArray , Dict [ str , Any ]]: \"\"\"Reads a CSVY file into dict with the header and array with the data. Args: filename: Name of the file to read. marker: The marker characters that indicate the yaml header. csv_options: Options to pass to np.loadtxt. yaml_options: Options to pass to yaml.safe_load. Raises: ModuleNotFoundError: If numpy is not found. Returns: Tuple containing: The numpy array and the header as a dictionary. \"\"\" if NDArray is NotImplemented : raise ModuleNotFoundError ( \"Module numpy is not present. Install it to read data into an array.\" ) import numpy as np yaml_options = yaml_options if yaml_options is not None else {} header , nlines , comment = read_header ( filename , marker = marker , ** yaml_options ) options = csv_options . copy () if csv_options is not None else {} options [ \"skiprows\" ] = nlines + options . get ( \"skiprows\" , 0 ) options [ \"comments\" ] = comment [ 0 ] if len ( comment ) >= 1 else \"#\" return np . loadtxt ( filename , ** options ), header read_to_dataframe ( filename , marker = '---' , csv_options = None , yaml_options = None ) \u00a4 Reads a CSVY file into dict with the header and a DataFrame with the data. Possible 'skiprows' and 'comment' argument provided in the 'csv_options' dictionary will be ignored. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read. required marker str The marker characters that indicate the yaml header. '---' csv_options Optional [ Dict [ str , Any ]] Options to pass to pd.read_csv. None yaml_options Optional [ Dict [ str , Any ]] Options to pass to yaml.safe_load. None Raises: Type Description ModuleNotFoundError If pandas is not found. Returns: Type Description Tuple [ DataFrame , Dict [ str , Any ]] Tuple containing: The pandas DataFrame and the header as a dictionary. Source code in csvy/readers.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def read_to_dataframe ( filename : Union [ Path , str ], marker : str = \"---\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> Tuple [ DataFrame , Dict [ str , Any ]]: \"\"\"Reads a CSVY file into dict with the header and a DataFrame with the data. Possible 'skiprows' and 'comment' argument provided in the 'csv_options' dictionary will be ignored. Args: filename: Name of the file to read. marker: The marker characters that indicate the yaml header. csv_options: Options to pass to pd.read_csv. yaml_options: Options to pass to yaml.safe_load. Raises: ModuleNotFoundError: If pandas is not found. Returns: Tuple containing: The pandas DataFrame and the header as a dictionary. \"\"\" if DataFrame is NotImplemented : raise ModuleNotFoundError ( \"Module pandas is not present. Install it to read data into DataFrame.\" ) import pandas as pd yaml_options = yaml_options if yaml_options is not None else {} header , nlines , comment = read_header ( filename , marker = marker , ** yaml_options ) options = csv_options . copy () if csv_options is not None else {} options [ \"skiprows\" ] = nlines options [ \"comment\" ] = comment [ 0 ] if len ( comment ) >= 1 else None return pd . read_csv ( filename , ** options ), header read_to_list ( filename , marker = '---' , csv_options = None , yaml_options = None ) \u00a4 Reads a CSVY file into a list with the header and a nested list with the data. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read. required marker str The marker characters that indicate the yaml header. '---' csv_options Optional [ Dict [ str , Any ]] Options to pass to csv.reader. None yaml_options Optional [ Dict [ str , Any ]] Options to pass to yaml.safe_load. None Raises: Type Description ModuleNotFoundError If numpy is not found. Returns: Type Description Tuple [ List [ List ], Dict [ str , Any ]] Tuple containing: The nested list and the header as a dictionary. Source code in csvy/readers.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def read_to_list ( filename : Union [ Path , str ], marker : str = \"---\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> Tuple [ List [ List ], Dict [ str , Any ]]: \"\"\"Reads a CSVY file into a list with the header and a nested list with the data. Args: filename: Name of the file to read. marker: The marker characters that indicate the yaml header. csv_options: Options to pass to csv.reader. yaml_options: Options to pass to yaml.safe_load. Raises: ModuleNotFoundError: If numpy is not found. Returns: Tuple containing: The nested list and the header as a dictionary. \"\"\" import csv yaml_options = yaml_options if yaml_options is not None else {} header , nlines , _ = read_header ( filename , marker = marker , ** yaml_options ) options = csv_options . copy () if csv_options is not None else {} data = [] with open ( filename , \"r\" , newline = \"\" ) as csvfile : csvreader = csv . reader ( csvfile , ** options ) for _ in range ( nlines ): next ( csvreader ) for row in csvreader : data . append ( row ) return data , header","title":"readers"},{"location":"reference/csvy/readers/#csvy.readers","text":"","title":"readers"},{"location":"reference/csvy/readers/#csvy.readers-functions","text":"","title":"Functions"},{"location":"reference/csvy/readers/#csvy.readers.get_comment","text":"Retrieves the comment character used in the header. Given that we know the header limiting markers are '---' it is possible to automatically find out the comment character by simply retrieving what is before the first occurrence of the marker. So, if we find '# ---', then we know that the comment characters are '# '. This will save the user to having to check the file before reading it. Parameters: Name Type Description Default line str Line of text, typically the first one of the file. required marker str The marker characters that indicate the yaml header. '---' Returns: Type Description str The comment character found. Source code in csvy/readers.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def get_comment ( line : str , marker : str = \"---\" ) -> str : \"\"\"Retrieves the comment character used in the header. Given that we know the header limiting markers are '---' it is possible to automatically find out the comment character by simply retrieving what is before the first occurrence of the marker. So, if we find '# ---', then we know that the comment characters are '# '. This will save the user to having to check the file before reading it. Args: line: Line of text, typically the first one of the file. marker: The marker characters that indicate the yaml header. Returns: The comment character found. \"\"\" if marker not in line : raise ValueError ( f \"Yaml header marker ' { marker } ' not found in line ' { line } '.\" ) else : return \"\" if line . startswith ( marker ) else line . split ( marker )[ 0 ]","title":"get_comment()"},{"location":"reference/csvy/readers/#csvy.readers.read_header","text":"Read the yaml-formatted header from a file. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read the header from. required marker str The marker characters that indicate the yaml header. '---' **kwargs Any Arguments to pass to 'yaml.safe_load'. {} Returns: Type Description Tuple [ Dict [ str , Any ], int , str ] Tuple containing: a dictionary with the header information, the number of header lines, and the comment character. Source code in csvy/readers.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def read_header ( filename : Union [ Path , str ], marker : str = \"---\" , ** kwargs : Any ) -> Tuple [ Dict [ str , Any ], int , str ]: \"\"\"Read the yaml-formatted header from a file. Args: filename: Name of the file to read the header from. marker: The marker characters that indicate the yaml header. **kwargs: Arguments to pass to 'yaml.safe_load'. Returns: Tuple containing: a dictionary with the header information, the number of header lines, and the comment character. \"\"\" header = [] markers = 0 nlines = 0 comment = \"\" with Path ( filename ) . open ( \"r\" ) as f : for line in f : if nlines == 0 : comment = get_comment ( line , marker = marker ) nlines += 1 if line . startswith ( f \" { comment }{ marker } \\n \" ): markers += 1 if markers == 2 : break line = line . lstrip ( comment ) header . append ( line ) return yaml . safe_load ( \"\" . join ( header ), ** kwargs ), nlines , comment","title":"read_header()"},{"location":"reference/csvy/readers/#csvy.readers.read_to_array","text":"Reads a CSVY file into dict with the header and array with the data. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read. required marker str The marker characters that indicate the yaml header. '---' csv_options Optional [ Dict [ str , Any ]] Options to pass to np.loadtxt. None yaml_options Optional [ Dict [ str , Any ]] Options to pass to yaml.safe_load. None Raises: Type Description ModuleNotFoundError If numpy is not found. Returns: Type Description Tuple [ NDArray , Dict [ str , Any ]] Tuple containing: The numpy array and the header as a dictionary. Source code in csvy/readers.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 def read_to_array ( filename : Union [ Path , str ], marker : str = \"---\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> Tuple [ NDArray , Dict [ str , Any ]]: \"\"\"Reads a CSVY file into dict with the header and array with the data. Args: filename: Name of the file to read. marker: The marker characters that indicate the yaml header. csv_options: Options to pass to np.loadtxt. yaml_options: Options to pass to yaml.safe_load. Raises: ModuleNotFoundError: If numpy is not found. Returns: Tuple containing: The numpy array and the header as a dictionary. \"\"\" if NDArray is NotImplemented : raise ModuleNotFoundError ( \"Module numpy is not present. Install it to read data into an array.\" ) import numpy as np yaml_options = yaml_options if yaml_options is not None else {} header , nlines , comment = read_header ( filename , marker = marker , ** yaml_options ) options = csv_options . copy () if csv_options is not None else {} options [ \"skiprows\" ] = nlines + options . get ( \"skiprows\" , 0 ) options [ \"comments\" ] = comment [ 0 ] if len ( comment ) >= 1 else \"#\" return np . loadtxt ( filename , ** options ), header","title":"read_to_array()"},{"location":"reference/csvy/readers/#csvy.readers.read_to_dataframe","text":"Reads a CSVY file into dict with the header and a DataFrame with the data. Possible 'skiprows' and 'comment' argument provided in the 'csv_options' dictionary will be ignored. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read. required marker str The marker characters that indicate the yaml header. '---' csv_options Optional [ Dict [ str , Any ]] Options to pass to pd.read_csv. None yaml_options Optional [ Dict [ str , Any ]] Options to pass to yaml.safe_load. None Raises: Type Description ModuleNotFoundError If pandas is not found. Returns: Type Description Tuple [ DataFrame , Dict [ str , Any ]] Tuple containing: The pandas DataFrame and the header as a dictionary. Source code in csvy/readers.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def read_to_dataframe ( filename : Union [ Path , str ], marker : str = \"---\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> Tuple [ DataFrame , Dict [ str , Any ]]: \"\"\"Reads a CSVY file into dict with the header and a DataFrame with the data. Possible 'skiprows' and 'comment' argument provided in the 'csv_options' dictionary will be ignored. Args: filename: Name of the file to read. marker: The marker characters that indicate the yaml header. csv_options: Options to pass to pd.read_csv. yaml_options: Options to pass to yaml.safe_load. Raises: ModuleNotFoundError: If pandas is not found. Returns: Tuple containing: The pandas DataFrame and the header as a dictionary. \"\"\" if DataFrame is NotImplemented : raise ModuleNotFoundError ( \"Module pandas is not present. Install it to read data into DataFrame.\" ) import pandas as pd yaml_options = yaml_options if yaml_options is not None else {} header , nlines , comment = read_header ( filename , marker = marker , ** yaml_options ) options = csv_options . copy () if csv_options is not None else {} options [ \"skiprows\" ] = nlines options [ \"comment\" ] = comment [ 0 ] if len ( comment ) >= 1 else None return pd . read_csv ( filename , ** options ), header","title":"read_to_dataframe()"},{"location":"reference/csvy/readers/#csvy.readers.read_to_list","text":"Reads a CSVY file into a list with the header and a nested list with the data. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to read. required marker str The marker characters that indicate the yaml header. '---' csv_options Optional [ Dict [ str , Any ]] Options to pass to csv.reader. None yaml_options Optional [ Dict [ str , Any ]] Options to pass to yaml.safe_load. None Raises: Type Description ModuleNotFoundError If numpy is not found. Returns: Type Description Tuple [ List [ List ], Dict [ str , Any ]] Tuple containing: The nested list and the header as a dictionary. Source code in csvy/readers.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def read_to_list ( filename : Union [ Path , str ], marker : str = \"---\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> Tuple [ List [ List ], Dict [ str , Any ]]: \"\"\"Reads a CSVY file into a list with the header and a nested list with the data. Args: filename: Name of the file to read. marker: The marker characters that indicate the yaml header. csv_options: Options to pass to csv.reader. yaml_options: Options to pass to yaml.safe_load. Raises: ModuleNotFoundError: If numpy is not found. Returns: Tuple containing: The nested list and the header as a dictionary. \"\"\" import csv yaml_options = yaml_options if yaml_options is not None else {} header , nlines , _ = read_header ( filename , marker = marker , ** yaml_options ) options = csv_options . copy () if csv_options is not None else {} data = [] with open ( filename , \"r\" , newline = \"\" ) as csvfile : csvreader = csv . reader ( csvfile , ** options ) for _ in range ( nlines ): next ( csvreader ) for row in csvreader : data . append ( row ) return data , header","title":"read_to_list()"},{"location":"reference/csvy/writers/","text":"csvy.writers \u00a4 Functions \u00a4 write ( filename , data , header , comment = '' , csv_options = None , yaml_options = None ) \u00a4 Writes the data and header in a CSV file, formating the header as yaml. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the information into. If it exists, it will be overwritten. required data Any The data to add to the file. required header Dict [ str , Any ] Dictionary with the header information to save. required comment str String to use to mark the header lines as comments. '' csv_options Optional [ Dict [ str , Any ]] Arguments to pass to the CSV writer, being this savetxt , panda's to_csv or something else. Mind that any argument related to the character to indicate a comment or header line will be ignored. None yaml_options Optional [ Dict [ str , Any ]] Arguments to pass to the 'yaml.safe_dump' function to control writing the header. None Source code in csvy/writers.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def write ( filename : Union [ Path , str ], data : Any , header : Dict [ str , Any ], comment : str = \"\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> None : \"\"\"Writes the data and header in a CSV file, formating the header as yaml. Args: filename: Name of the file to save the information into. If it exists, it will be overwritten. data: The data to add to the file. header: Dictionary with the header information to save. comment: String to use to mark the header lines as comments. csv_options: Arguments to pass to the CSV writer, being this `savetxt`, panda's `to_csv` or something else. Mind that any argument related to the character to indicate a comment or header line will be ignored. yaml_options: Arguments to pass to the 'yaml.safe_dump' function to control writing the header. \"\"\" csv_options = csv_options if csv_options is not None else {} yaml_options = yaml_options if yaml_options is not None else {} write_header ( filename , header , comment , ** yaml_options ) write_data ( filename , data , comment , ** csv_options ) write_csv ( filename , data , comment = '' , ** kwargs ) \u00a4 Writes the tabular to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data. Can have anything that counts as a sequence. Each component of the sequence will be saved in a different row. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Returns: Type Description bool True if the writer worked, False otherwise. Source code in csvy/writers.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def write_csv ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> bool : \"\"\"Writes the tabular to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data. Can have anything that counts as a sequence. Each component of the sequence will be saved in a different row. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. Returns: True if the writer worked, False otherwise. \"\"\" import csv with open ( filename , \"a\" , newline = \"\" ) as f : writer = csv . writer ( f , ** kwargs ) for row in data : writer . writerow ( row ) return True write_data ( filename , data , comment = '' , ** kwargs ) \u00a4 Writes the tabular data to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data to add to the file. Depending on its type, a different method will be used to save the data to disk. The fallback will be the built in CSV package. If it is a numpy array, the savetxt will be used, while if it is a pandas Dataframe, the to_csv method will be used. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Source code in csvy/writers.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def write_data ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> None : \"\"\"Writes the tabular data to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data to add to the file. Depending on its type, a different method will be used to save the data to disk. The fallback will be the built in CSV package. If it is a numpy array, the `savetxt` will be used, while if it is a pandas Dataframe, the `to_csv` method will be used. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. \"\"\" for fun in KNOWN_WRITERS : if fun ( filename , data , comment , ** kwargs ): return write_csv ( filename , data , comment , ** kwargs ) write_header ( filename , header , comment = '' , ** kwargs ) \u00a4 Writes the header dictionary into the file with lines starting with comment. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the header into. If it exists, it will be overwritten. required header Dict [ str , Any ] Dictionary with the header information to save. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to pass to 'yaml.safe_dump'. If \"sort_keys\" is not one of arguments, it will be set to sort_keys=False. {} Source code in csvy/writers.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def write_header ( filename : Union [ Path , str ], header : Dict [ str , Any ], comment : str = \"\" , ** kwargs : Any ) -> None : \"\"\"Writes the header dictionary into the file with lines starting with comment. Args: filename: Name of the file to save the header into. If it exists, it will be overwritten. header: Dictionary with the header information to save. comment: String to use to mark the header lines as comments. **kwargs: Arguments to pass to 'yaml.safe_dump'. If \"sort_keys\" is not one of arguments, it will be set to sort_keys=False. \"\"\" if \"sort_keys\" not in kwargs : kwargs [ \"sort_keys\" ] = False stream = yaml . safe_dump ( header , ** kwargs ) stream = \" \\n \" . join ([ f \" { comment } \" + line for line in stream . split ( \" \\n \" )]) marker = f \" { comment } --- \\n \" stream = marker + stream + \"--- \\n \" with Path ( filename ) . open ( \"w\" ) as f : f . write ( stream ) write_numpy ( filename , data , comment = '' , ** kwargs ) \u00a4 Writes the numpy array to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data. If it is a numpy array, it will be saved, otherwise nothing is done. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Return True if the writer worked, False otherwise. Source code in csvy/writers.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @register_writer def write_numpy ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> bool : \"\"\"Writes the numpy array to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data. If it is a numpy array, it will be saved, otherwise nothing is done. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. Return: True if the writer worked, False otherwise. \"\"\" try : import numpy as np kwargs [ \"comments\" ] = comment if isinstance ( data , np . ndarray ): with open ( filename , \"a\" ) as f : np . savetxt ( f , data , ** kwargs ) return True except ModuleNotFoundError : logging . getLogger () . debug ( \"Numpy is not installed, so not using 'savetxt'.\" ) return False write_pandas ( filename , data , comment = '' , ** kwargs ) \u00a4 Writes the pandas dataframe to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data. If it is a pandas dataframe, it will be saved, otherwise nothing is done. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Returns: Type Description bool True if the writer worked, False otherwise. Source code in csvy/writers.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 @register_writer def write_pandas ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> bool : \"\"\"Writes the pandas dataframe to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data. If it is a pandas dataframe, it will be saved, otherwise nothing is done. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. Returns: True if the writer worked, False otherwise. \"\"\" try : import pandas as pd if isinstance ( data , pd . DataFrame ): with open ( filename , \"a\" , newline = \"\" ) as f : data . to_csv ( f , ** kwargs ) return True except ModuleNotFoundError : logging . getLogger () . debug ( \"Pandas is not installed, so not using 'to_csv'.\" ) return False","title":"writers"},{"location":"reference/csvy/writers/#csvy.writers","text":"","title":"writers"},{"location":"reference/csvy/writers/#csvy.writers-functions","text":"","title":"Functions"},{"location":"reference/csvy/writers/#csvy.writers.write","text":"Writes the data and header in a CSV file, formating the header as yaml. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the information into. If it exists, it will be overwritten. required data Any The data to add to the file. required header Dict [ str , Any ] Dictionary with the header information to save. required comment str String to use to mark the header lines as comments. '' csv_options Optional [ Dict [ str , Any ]] Arguments to pass to the CSV writer, being this savetxt , panda's to_csv or something else. Mind that any argument related to the character to indicate a comment or header line will be ignored. None yaml_options Optional [ Dict [ str , Any ]] Arguments to pass to the 'yaml.safe_dump' function to control writing the header. None Source code in csvy/writers.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def write ( filename : Union [ Path , str ], data : Any , header : Dict [ str , Any ], comment : str = \"\" , csv_options : Optional [ Dict [ str , Any ]] = None , yaml_options : Optional [ Dict [ str , Any ]] = None , ) -> None : \"\"\"Writes the data and header in a CSV file, formating the header as yaml. Args: filename: Name of the file to save the information into. If it exists, it will be overwritten. data: The data to add to the file. header: Dictionary with the header information to save. comment: String to use to mark the header lines as comments. csv_options: Arguments to pass to the CSV writer, being this `savetxt`, panda's `to_csv` or something else. Mind that any argument related to the character to indicate a comment or header line will be ignored. yaml_options: Arguments to pass to the 'yaml.safe_dump' function to control writing the header. \"\"\" csv_options = csv_options if csv_options is not None else {} yaml_options = yaml_options if yaml_options is not None else {} write_header ( filename , header , comment , ** yaml_options ) write_data ( filename , data , comment , ** csv_options )","title":"write()"},{"location":"reference/csvy/writers/#csvy.writers.write_csv","text":"Writes the tabular to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data. Can have anything that counts as a sequence. Each component of the sequence will be saved in a different row. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Returns: Type Description bool True if the writer worked, False otherwise. Source code in csvy/writers.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def write_csv ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> bool : \"\"\"Writes the tabular to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data. Can have anything that counts as a sequence. Each component of the sequence will be saved in a different row. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. Returns: True if the writer worked, False otherwise. \"\"\" import csv with open ( filename , \"a\" , newline = \"\" ) as f : writer = csv . writer ( f , ** kwargs ) for row in data : writer . writerow ( row ) return True","title":"write_csv()"},{"location":"reference/csvy/writers/#csvy.writers.write_data","text":"Writes the tabular data to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data to add to the file. Depending on its type, a different method will be used to save the data to disk. The fallback will be the built in CSV package. If it is a numpy array, the savetxt will be used, while if it is a pandas Dataframe, the to_csv method will be used. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Source code in csvy/writers.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def write_data ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> None : \"\"\"Writes the tabular data to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data to add to the file. Depending on its type, a different method will be used to save the data to disk. The fallback will be the built in CSV package. If it is a numpy array, the `savetxt` will be used, while if it is a pandas Dataframe, the `to_csv` method will be used. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. \"\"\" for fun in KNOWN_WRITERS : if fun ( filename , data , comment , ** kwargs ): return write_csv ( filename , data , comment , ** kwargs )","title":"write_data()"},{"location":"reference/csvy/writers/#csvy.writers.write_header","text":"Writes the header dictionary into the file with lines starting with comment. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the header into. If it exists, it will be overwritten. required header Dict [ str , Any ] Dictionary with the header information to save. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to pass to 'yaml.safe_dump'. If \"sort_keys\" is not one of arguments, it will be set to sort_keys=False. {} Source code in csvy/writers.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def write_header ( filename : Union [ Path , str ], header : Dict [ str , Any ], comment : str = \"\" , ** kwargs : Any ) -> None : \"\"\"Writes the header dictionary into the file with lines starting with comment. Args: filename: Name of the file to save the header into. If it exists, it will be overwritten. header: Dictionary with the header information to save. comment: String to use to mark the header lines as comments. **kwargs: Arguments to pass to 'yaml.safe_dump'. If \"sort_keys\" is not one of arguments, it will be set to sort_keys=False. \"\"\" if \"sort_keys\" not in kwargs : kwargs [ \"sort_keys\" ] = False stream = yaml . safe_dump ( header , ** kwargs ) stream = \" \\n \" . join ([ f \" { comment } \" + line for line in stream . split ( \" \\n \" )]) marker = f \" { comment } --- \\n \" stream = marker + stream + \"--- \\n \" with Path ( filename ) . open ( \"w\" ) as f : f . write ( stream )","title":"write_header()"},{"location":"reference/csvy/writers/#csvy.writers.write_numpy","text":"Writes the numpy array to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data. If it is a numpy array, it will be saved, otherwise nothing is done. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Return True if the writer worked, False otherwise. Source code in csvy/writers.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 @register_writer def write_numpy ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> bool : \"\"\"Writes the numpy array to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data. If it is a numpy array, it will be saved, otherwise nothing is done. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. Return: True if the writer worked, False otherwise. \"\"\" try : import numpy as np kwargs [ \"comments\" ] = comment if isinstance ( data , np . ndarray ): with open ( filename , \"a\" ) as f : np . savetxt ( f , data , ** kwargs ) return True except ModuleNotFoundError : logging . getLogger () . debug ( \"Numpy is not installed, so not using 'savetxt'.\" ) return False","title":"write_numpy()"},{"location":"reference/csvy/writers/#csvy.writers.write_pandas","text":"Writes the pandas dataframe to the chosen file, adding it after the header. Parameters: Name Type Description Default filename Union [ Path , str ] Name of the file to save the data into. The data will be added to the end of the file. required data Any The data. If it is a pandas dataframe, it will be saved, otherwise nothing is done. required comment str String to use to mark the header lines as comments. '' **kwargs Any Arguments to be passed to the underlaying saving method. {} Returns: Type Description bool True if the writer worked, False otherwise. Source code in csvy/writers.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 @register_writer def write_pandas ( filename : Union [ Path , str ], data : Any , comment : str = \"\" , ** kwargs : Any ) -> bool : \"\"\"Writes the pandas dataframe to the chosen file, adding it after the header. Args: filename: Name of the file to save the data into. The data will be added to the end of the file. data: The data. If it is a pandas dataframe, it will be saved, otherwise nothing is done. comment: String to use to mark the header lines as comments. **kwargs: Arguments to be passed to the underlaying saving method. Returns: True if the writer worked, False otherwise. \"\"\" try : import pandas as pd if isinstance ( data , pd . DataFrame ): with open ( filename , \"a\" , newline = \"\" ) as f : data . to_csv ( f , ** kwargs ) return True except ModuleNotFoundError : logging . getLogger () . debug ( \"Pandas is not installed, so not using 'to_csv'.\" ) return False","title":"write_pandas()"}]}